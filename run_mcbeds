#!/bin/bash
################################################################################
# Xiph's Minecraft Bedrock Edition Dedicated Server core management system
#
# Created July 29, 2019
# Last updated January 6, 2021
#
################################################################################
# First stage is to set some variable defaults
#
# Change the working directory to that of the srver being run, and attach the
# I/O of the process to a UNIX socket. Flush the startup message and begin
# listening on the socket for connections.
################################################################################

# Some default values, change these to suit your needs
# Sets where the server is being run from
SERVER=${HOME}/server

# Minecraft Bedrock Edition Dedicated Server comes bundled with a specific
# binary libCrypto.so object file. Using the system libCrypto may not work.
# Why Mojang doesn't statically link libCrypto if they system libCrypto isn't
# good enough is unknown, but they don't so this jank is required.
LD_LIBRARY_PATH=${SERVER}

# Redirect this wherever you prefer to hold your log files.
# If you don't care about logs, feel free to redirect this to /dev/null
LOG=${SERVER}/mcbe.log

################################################################################
# Do not make changes below this line
################################################################################
# Change working directory to the server directory. This is required by the
# Minecraft Bedrock Edition Dedicated Server
cd ${SERVER}

# Set up an asynchronous I/O pipe between this wrapper script and the Minecraft
# Bedrock Edition Dedicated Server, with output redirected to the log file as
# well as the I/O pipe
coproc ( ${SERVER}/bedrock_server | tee -a ${LOG} )

# Flush the startup messages from Minecraft Bedrock Edition Dedicated Server,
# so as not to have a large backlog for the first client to connect
while read -u ${COPROC[0]} line; do
	case $line in
		*Server\ started.)
			break
			;;
		*)	;;
	esac
done

# Using netcat, set up a UNIX socket to listen for local process connections.
# Read any input fom said connections and send the results, then disconnect and
# await the next connection.
while ( ps -Cp ${COPROC_PID}  > /dev/null ) ; do
  nc -q1 -Ul ${SERVER}/12011 <&${COPROC[0]} >&${COPROC[1]}
done
